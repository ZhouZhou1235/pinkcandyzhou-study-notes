C语言是一种面向过程式的计算机程序设计语言


简介
C 语言最初是用于系统开发工作，特别是组成操作系统的程序。
test.c C源码文件


环境设置
文本编辑器+编译器mingw
将mingw添加到环境变量PATH中，在终端输入gcc -v检查。


程序结构
#include <stdio.h>
int main()
{
   /* 我的第一个 C 程序 */
   printf("Hello, World! \n");
   return 0;
}

#include <stdio.h> 预处理器指令
int main() 主函数
/**/ 注释
printf() 函数
return 返回语句

编译和执行
hello.c 源码
gcc hello.c 编译
./a.exe 生成可执行程序


语法
C程序由各种令牌Token组成
分号; 代表语句结束
// /**/ 注释
标识符 标识项目（例如变量，函数）的名称
关键字 如auto、break、case......


数据类型
基本数据  int char float double
枚举
void
派生  数组 指针 结构体


变量
程序可操作存储区的名称
定义
type variable_list;
例
int age;

初始化
type variable_name = value;
例
int x = 10; 

关于变量声明
extern int i; //声明不定义
int i; //声明且定义


常量
程序执行期间不会改变的值
整数 1
浮点 1.0
字符 \n
字符串 “zhou”

定义常量
#define 常量名 常量值
例
#define PI 3.14159

用const关键字定义常量
const 数据类型 常量名 = 常量值;
例
const int MAX_VALUE = 100;


储存类
定义变量/函数的存储位置、生命周期和作用域
auto 默认类型
{
   int mount;
   auto int month;
}

register 定义存储在寄存器中（速度快）
{
   register int  miles;
}

static 保持局部变量的存在
#include <stdio.h>
 
/* 函数声明 */
void func1(void);
 
static int count=10;        /* 全局变量 - static 是默认的 */
 
int main()
{
  while (count--) {
      func1();
  }
  return 0;
}
 
void func1(void)
{
/* 'thingy' 是 'func1' 的局部变量 - 只初始化一次
 * 每次调用函数 'func1' 'thingy' 值不会被重置。
 */                
  static int thingy=5;
  thingy++;
  printf(" thingy 为 %d ， count 为 %d\n", thingy, count);
}

extern 定义在其他文件中声明的全局变量或函数
第一个文件：main.c

实例
#include <stdio.h>
 
int count ;
extern void write_extern();
 
int main()
{
   count = 5;
   write_extern();
}
第二个文件：support.c

实例
#include <stdio.h>
 
extern int count;
 
void write_extern(void)
{
   printf("count is %d\n", count);
}


运算符
算数
+ - * / % ++ --

关系（比较）
== != > < >= <=

逻辑
&&与 ||或 !非

位运算
&、 | 和 ^ 的真值表
p	q	p & q	p | q	p ^ q
0	0	0	0	0
0	1	0	1	1
1	1	1	1	0
1	0	0	1	1

赋值
= += -= *= /= %= <<= >>= &= ^= |=

杂项
sizeof() 返回变量大小
& 返回变量地址
* 指针
? 条件表达式

注意运算符优先级


判断
if语句
if(boolean_expression 1)
{
   /* 当布尔表达式 1 为真时执行 */
}
else if( boolean_expression 2)
{
   /* 当布尔表达式 2 为真时执行 */
}
else if( boolean_expression 3)
{
   /* 当布尔表达式 3 为真时执行 */
}
else 
{
   /* 当上面条件都不为真时执行 */
}

switch语句
测试一个变量等于多个值时的情况
switch(expression){
    case constant-expression  :
       statement(s);
       break; /* 可选的 */
    case constant-expression  :
       statement(s);
       break; /* 可选的 */
  
    /* 您可以有任意数量的 case 语句 */
    default : /* 可选的 */
       statement(s);
}

三元运算符代替if语句
Exp1 ? Exp2 : Exp3;


循环
while语句
while(condition)
{
   statement(s);
}

for语句
for ( init; condition; increment )
{
   statement(s);
}
init 会首先被执行，且只会执行一次。
执行完 for 循环主体后，控制流会跳回上面的 increment 语句。

do...while语句
do
{
   statement(s);

}while( condition );

break语句
跳出循环

continue语句
跳过本次循环

goto语句（不建议使用）
无条件将运行指引到goto标记的位置


函数
函数是一组一起执行一个任务的语句
定义函数
return_type function_name( parameter list )
{
   body of the function
}

函数声明
告诉编译器函数名称及如何调用函数
return_type function_name( parameter list );

调用函数
例
#include <stdio.h>
 
/* 函数声明 */
int max(int num1, int num2);
 
int main ()
{
   /* 局部变量定义 */
   int a = 100;
   int b = 200;
   int ret;
 
   /* 调用函数来获取最大值 */
   ret = max(a, b);
 
   printf( "Max value is : %d\n", ret );
 
   return 0;
}
 
/* 函数返回两个数中较大的那个数 */
int max(int num1, int num2) 
{
   /* 局部变量声明 */
   int result;
 
   if (num1 > num2)
      result = num1;
   else
      result = num2;
 
   return result; 
}

函数参数
传值调用
引用调用（请学习指针）



作用域规则
局部变量
全局变量
例
#include <stdio.h>
 
/* 全局变量声明 */
int g;
 
int main ()
{
  /* 局部变量声明 */
  int a, b;
 
  /* 实际初始化 */
  a = 10;
  b = 20;
  g = a + b;
 
  printf ("value of a = %d, b = %d and g = %d\n", a, b, g);
 
  return 0;
}

形式参数
函数的参数，形式参数，被当作该函数内的局部变量
例
#include <stdio.h>
 
int a = 20;
 
int main ()
{
  int a = 10;
  int b = 20;
  int c = 0;
  int sum(int, int);

  c = sum( a, b);
  printf ("sum result = %d\n",  c);

  return 0;
}

int sum(int a, int b)
{
    return a + b;
}


数组
一个固定大小的相同类型元素的顺序集合
声明数组
type arrayName [ arraySize ];
例
声明一个类型为 double 的包含 10 个元素的数组 balance
double balance[10];

初始化数组
例
double balance[5] = {1000.0, 2.0, 3.4, 7.0, 50.0};
balance[4] = 50.0;

访问数组元素
例
double salary = balance[9];

例
#include <stdio.h>
 
int main ()
{
   int n[ 10 ]; /* n 是一个包含 10 个整数的数组 */
   int i,j;
 
   /* 初始化数组元素 */         
   for ( i = 0; i < 10; i++ )
   {
      n[ i ] = i + 100; /* 设置元素 i 为 i + 100 */
   }
   
   /* 输出数组中每个元素的值 */
   for (j = 0; j < 10; j++ )
   {
      printf("Element[%d] = %d\n", j, n[j] );
   }
 
   return 0;
}

获取数组长度
例
int numbers[] = {1, 2, 3, 4, 5};
int length = sizeof(numbers) / sizeof(numbers[0]);


枚举enum
定义一组具有离散值的常量
enum　枚举名　{枚举元素1,枚举元素2,……};
例
#include <stdio.h>
 
enum DAY
{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
};
 
int main()
{
    enum DAY day;
    day = WED;
    printf("%d",day);
    return 0;
}
例 for循环遍历枚举的元素
#include <stdio.h>
 
enum DAY
{
      MON=1, TUE, WED, THU, FRI, SAT, SUN
} day;
int main()
{
    // 遍历枚举元素
    for (day = MON; day <= SUN; day++) {
        printf("枚举元素：%d \n", day);
    }
}


指针
通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。
例 输出定义的变量地址
#include <stdio.h>
int main ()
{
    int var_runoob = 10;
    int *p;              // 定义指针变量
    p = &var_runoob;
 
   printf("var_runoob 变量的地址： %p\n", p);
   return 0;
}

指针也就是内存地址，指针变量是用来存放内存地址的变量。
定义指针
int    *ip;    /* 一个整型的指针 */
double *dp;    /* 一个 double 型的指针 */
float  *fp;    /* 一个浮点型的指针 */
char   *ch;    /* 一个字符型的指针 */
例
#include <stdio.h>
int main ()
{
   int  var = 20;   /* 实际变量的声明 */
   int  *ip;        /* 指针变量的声明 */
 
   ip = &var;  /* 在指针变量中存储 var 的地址 */
 
   printf("var 变量的地址: %p\n", &var  );
 
   /* 在指针变量中存储的地址 */
   printf("ip 变量存储的地址: %p\n", ip );
 
   /* 使用指针访问值 */
   printf("*ip 变量的值: %d\n", *ip );
 
   return 0;
}

赋为 NULL 值的指针被称为空指针
#include <stdio.h>
int main ()
{
   int  *ptr = NULL;
   printf("ptr 的地址是 %p\n", ptr  );
   return 0;
}


函数指针
指向函数的指针变量
定义函数指针
typedef int (*fun_ptr)(int,int); // 声明一个指向同样参数、返回值的函数指针类型
例
#include <stdio.h>
 
int max(int x, int y)
{
    return x > y ? x : y;
}
 
int main(void)
{
    /* p 是函数指针 */
    int (* p)(int, int) = & max; // &可以省略
    int a, b, c, d;
 
    printf("请输入三个数字:");
    scanf("%d %d %d", & a, & b, & c);
 
    /* 与直接调用函数等价，d = max(max(a, b), c) */
    d = p(p(a, b), c); 
 
    printf("最大的数字是: %d\n", d);
 
    return 0;
}

回调函数
例
#include <stdlib.h>  
#include <stdio.h>
 
void populate_array(int *array, size_t arraySize, int (*getNextValue)(void))
{
    for (size_t i=0; i<arraySize; i++)
        array[i] = getNextValue();
}
 
// 获取随机值
int getNextRandomValue(void)
{
    return rand();
}
 
int main(void)
{
    int myarray[10];
    /* getNextRandomValue 不能加括号，否则无法编译，因为加上括号之后相当于传入此参数时传入了 int , 而不是函数指针*/
    populate_array(myarray, 10, getNextRandomValue);
    for(int i = 0; i < 10; i++) {
        printf("%d ", myarray[i]);
    }
    printf("\n");
    return 0;
}


字符串
字符串实际上是使用空字符 \0 结尾的一维字符数组

常用函数
strcpy(s1, s2) s2复制到s1
strcat(s1, s2) 连接字符串
strlen(s1) 长度
strcmp(s1, s2)s1=s2返回 0，s1<s2返回小于 0；s1>s2 返回大于 0。
strchr(s1, ch) 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。
strstr(s1, s2) 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。


结构体
允许存储不同类型的数据项
定义结构
struct tag {
    member-list
    member-list
    member-list  
    ...
} variable-list ;
例
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} book;  

结构初始化
例
#include <stdio.h>

struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
} book = {"C 语言", "RUNOOB", "编程语言", 123456};

int main()
{
    printf("title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n", book.title, book.author, book.subject, book.book_id);
}

访问结构成员
#include <stdio.h>
#include <string.h>
 
struct Books
{
   char  title[50];
   char  author[50];
   char  subject[100];
   int   book_id;
};
 
int main( )
{
   struct Books Book1;        /* 声明 Book1，类型为 Books */
   struct Books Book2;        /* 声明 Book2，类型为 Books */
 
   /* Book1 详述 */
   strcpy( Book1.title, "C Programming");
   strcpy( Book1.author, "Nuha Ali");
   strcpy( Book1.subject, "C Programming Tutorial");
   Book1.book_id = 6495407;

   /* Book2 详述 */
   strcpy( Book2.title, "Telecom Billing");
   strcpy( Book2.author, "Zara Ali");
   strcpy( Book2.subject, "Telecom Billing Tutorial");
   Book2.book_id = 6495700;
 
   /* 输出 Book1 信息 */
   printf( "Book 1 title : %s\n", Book1.title);
   printf( "Book 1 author : %s\n", Book1.author);
   printf( "Book 1 subject : %s\n", Book1.subject);
   printf( "Book 1 book_id : %d\n", Book1.book_id);

   /* 输出 Book2 信息 */
   printf( "Book 2 title : %s\n", Book2.title);
   printf( "Book 2 author : %s\n", Book2.author);
   printf( "Book 2 subject : %s\n", Book2.subject);
   printf( "Book 2 book_id : %d\n", Book2.book_id);

   return 0;
}

结构作为函数参数
可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。

指向结构的指针
可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似。

结构体大小的计算
可以使用 sizeof 运算符来计算结构体的大小
例
#include <stdio.h>

struct Person {
    char name[20];
    int age;
    float height;
};

int main() {
    struct Person person;
    printf("结构体 Person 大小为: %zu 字节\n", sizeof(person));
    return 0;
}


共用体
允许在相同的内存位置存储不同的数据类型
定义共用体
union [union tag]
{
   member definition;
   member definition;
   ...
   member definition;
} [one or more union variables];
例
union Data
{
   int i;
   float f;
   char  str[20];
} data;

访问共用体成员
例
#include <stdio.h>
#include <string.h>
 
union Data
{
   int i;
   float f;
   char  str[20];
};
 
int main( )
{
   union Data data;        
 
   data.i = 10;
   data.f = 220.5;
   strcpy( data.str, "C Programming");
 
   printf( "data.i : %d\n", data.i);
   printf( "data.f : %f\n", data.f);
   printf( "data.str : %s\n", data.str);
 
   return 0;
}
输出结果
data.i : 1917853763
data.f : 4122360580327794900000000000000.000000
data.str : C Programming
共用体的 i 和 f 成员的值有损坏，因为最后赋给变量的值占用了内存位置，这也是 str 成员能够完好输出的原因。

例 改进上面的代码
#include <stdio.h>
#include <string.h>
 
union Data
{
   int i;
   float f;
   char  str[20];
};
 
int main( )
{
   union Data data;        
 
   data.i = 10;
   printf( "data.i : %d\n", data.i);
   
   data.f = 220.5;
   printf( "data.f : %f\n", data.f);
   
   strcpy( data.str, "C Programming");
   printf( "data.str : %s\n", data.str);
 
   return 0;
}

